name: HACS Validation

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

jobs:
  hacs-validation:
    name: HACS Validation
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
        cache-dependency-path: package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Build card
      run: npm run build

    - name: Validate HACS requirements
      run: |
        echo "üîç Validating HACS requirements..."
        
        # Check if hacs.json exists
        if [ ! -f "hacs.json" ]; then
          echo "‚ùå hacs.json is missing"
          exit 1
        fi
        echo "‚úÖ hacs.json exists"
        
        # Validate hacs.json structure
        if ! jq empty hacs.json 2>/dev/null; then
          echo "‚ùå hacs.json is not valid JSON"
          exit 1
        fi
        echo "‚úÖ hacs.json is valid JSON"
        
        # Check required fields in hacs.json
        if ! jq -e '.name' hacs.json >/dev/null 2>&1; then
          echo "‚ùå hacs.json missing 'name' field"
          exit 1
        fi
        echo "‚úÖ hacs.json has 'name' field"
        
        if ! jq -e '.type' hacs.json >/dev/null 2>&1; then
          echo "‚ùå hacs.json missing 'type' field"
          exit 1
        fi
        echo "‚úÖ hacs.json has 'type' field"
        
        # Check if type is 'lovelace' for cards
        if [ "$(jq -r '.type' hacs.json)" != "lovelace" ]; then
          echo "‚ùå hacs.json type should be 'lovelace' for cards"
          exit 1
        fi
        echo "‚úÖ hacs.json type is 'lovelace'"
        
        # Check if content_in_root is true (required for cards)
        if [ "$(jq -r '.content_in_root' hacs.json)" != "true" ]; then
          echo "‚ùå hacs.json content_in_root should be true for cards"
          exit 1
        fi
        echo "‚úÖ hacs.json content_in_root is true"

    - name: Validate build output
      run: |
        echo "üîç Validating build output..."
        
        # Check if the main card file exists
        if [ ! -f "dist/emergency-alerts-card.js" ]; then
          echo "‚ùå Main card file not found in dist/"
          exit 1
        fi
        echo "‚úÖ Main card file exists"
        
        # Check file size (should be reasonable)
        file_size=$(stat -c%s "dist/emergency-alerts-card.js")
        if [ "$file_size" -lt 1000 ]; then
          echo "‚ùå Card file seems too small ($file_size bytes)"
          exit 1
        fi
        echo "‚úÖ Card file size is reasonable ($file_size bytes)"
        
        # Check if file contains expected content
        if ! grep -q "customElements.define" dist/emergency-alerts-card.js; then
          echo "‚ùå Card file doesn't contain customElements.define"
          exit 1
        fi
        echo "‚úÖ Card file contains customElements.define"

    - name: Validate README
      run: |
        echo "üîç Validating README..."
        
        # Check if README exists
        if [ ! -f "README.md" ]; then
          echo "‚ùå README.md is missing"
          exit 1
        fi
        echo "‚úÖ README.md exists"
        
        # Check README size (should be substantial)
        readme_size=$(stat -c%s "README.md")
        if [ "$readme_size" -lt 500 ]; then
          echo "‚ùå README.md seems too small ($readme_size bytes)"
          exit 1
        fi
        echo "‚úÖ README.md size is reasonable ($readme_size bytes)"
        
        # Check for installation instructions
        if ! grep -qi "install" README.md; then
          echo "‚ùå README.md should contain installation instructions"
          exit 1
        fi
        echo "‚úÖ README.md contains installation instructions"
        
        # Check for configuration examples
        if ! grep -qi "config" README.md; then
          echo "‚ùå README.md should contain configuration examples"
          exit 1
        fi
        echo "‚úÖ README.md contains configuration examples"

    - name: Validate package.json
      run: |
        echo "üîç Validating package.json..."
        
        # Check if package.json exists
        if [ ! -f "package.json" ]; then
          echo "‚ùå package.json is missing"
          exit 1
        fi
        echo "‚úÖ package.json exists"
        
        # Validate package.json structure
        if ! jq empty package.json 2>/dev/null; then
          echo "‚ùå package.json is not valid JSON"
          exit 1
        fi
        echo "‚úÖ package.json is valid JSON"
        
        # Check for required fields
        if ! jq -e '.name' package.json >/dev/null 2>&1; then
          echo "‚ùå package.json missing 'name' field"
          exit 1
        fi
        echo "‚úÖ package.json has 'name' field"
        
        if ! jq -e '.version' package.json >/dev/null 2>&1; then
          echo "‚ùå package.json missing 'version' field"
          exit 1
        fi
        echo "‚úÖ package.json has 'version' field"
        
        if ! jq -e '.description' package.json >/dev/null 2>&1; then
          echo "‚ùå package.json missing 'description' field"
          exit 1
        fi
        echo "‚úÖ package.json has 'description' field"

    - name: Check for license
      run: |
        echo "üîç Checking for license..."
        
        # Check for LICENSE file
        if [ ! -f "LICENSE" ]; then
          echo "‚ö†Ô∏è  LICENSE file not found (recommended for HACS)"
        else
          echo "‚úÖ LICENSE file exists"
        fi
        
        # Check package.json for license field
        if ! jq -e '.license' package.json >/dev/null 2>&1; then
          echo "‚ö†Ô∏è  package.json missing 'license' field (recommended)"
        else
          echo "‚úÖ package.json has 'license' field"
        fi

    - name: Validate repository structure
      run: |
        echo "üîç Validating repository structure..."
        
        # Check for source directory
        if [ ! -d "src" ]; then
          echo "‚ùå src/ directory is missing"
          exit 1
        fi
        echo "‚úÖ src/ directory exists"
        
        # Check for main source file
        if [ ! -f "src/emergency-alerts-card.ts" ]; then
          echo "‚ùå Main source file src/emergency-alerts-card.ts is missing"
          exit 1
        fi
        echo "‚úÖ Main source file exists"
        
        # Check for TypeScript config
        if [ ! -f "tsconfig.json" ]; then
          echo "‚ùå tsconfig.json is missing"
          exit 1
        fi
        echo "‚úÖ tsconfig.json exists"
        
        # Check for rollup config
        if [ ! -f "rollup.config.js" ]; then
          echo "‚ùå rollup.config.js is missing"
          exit 1
        fi
        echo "‚úÖ rollup.config.js exists"

    - name: HACS Validation Complete
      run: |
        echo "üéâ All HACS validation checks passed!"
        echo "‚úÖ Repository is HACS compliant" 